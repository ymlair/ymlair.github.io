<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Solanum nigrum</title>
        <link>https://5hui.win/</link>
        <description>MemE is a powerful and highly customizable GoHugo theme for personal blogs.</description>
        <generator>Hugo 0.80.0 https://gohugo.io/</generator>
        
            <language>en</language>
        
        
            <managingEditor>hpmarkup@gmail.com (ymlair)</managingEditor>
        
        
            <webMaster>hpmarkup@gmail.com (ymlair)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
        
        <lastBuildDate>Mon, 15 Mar 2021 13:55:50 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://5hui.win/rss.xml" />
        
        
            <item>
                <title>Cordova 安装笔记</title>
                <link>https://5hui.win/posts/cordova-install-note/</link>
                <guid isPermaLink="true">https://5hui.win/posts/cordova-install-note/</guid>
                <pubDate>Mon, 15 Mar 2021 12:28:37 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h3 id=&#34;操作系统&#34;&gt;操作系统&lt;/h3&gt;
&lt;p&gt;&lt;code&gt; macOS Big Sur 11.1&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装-java&#34;&gt;安装 java&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下载 &lt;a href=&#34;https://www.oracle.com/br/java/technologies/javase/javase-jdk8-downloads.html#license-lightbox&#34;&gt;jdk-8u281-macosx-x64.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;手动安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装-nodejs&#34;&gt;安装 nodejs&lt;/h3&gt;
&lt;p&gt;需要更新 &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/help/homebrew-bottles/&#34;&gt;Homebrew-bottles 源&lt;/a&gt;，不然安装的很慢
&lt;code&gt;brew install node&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装-cordova&#34;&gt;安装 cordova&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;npm --registry https://registry.npm.taobao.org install cordova&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装-android-studio&#34;&gt;安装 android studio&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下载 &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;android-studio-ide-201.7042882-mac.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;手动安装&lt;/li&gt;
&lt;li&gt;打开软件，中间跳过，点击创建一个新项目，这时会提示安装 &lt;code&gt;SDK tools 、platforms tools&lt;/code&gt;，开始安装（这里是去 google 下载，但我这直接可以下载安装，未配置代理，没去找原因）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置环境变量&#34;&gt;配置环境变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;export ANDROID_SDK_ROOT=/Users/$USER/Library/Android/sdk
export PATH=$PATH:$ANDROID_SDK_ROOT/tools
export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建项目&#34;&gt;创建项目&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cordova create hello
cd hello
cordova platform add android
cordova requirements //检测依赖是否安装
cordova build android //把 www 目录下的文件打包成apk，这步需要安装 gradle，第一次装会慢点
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Golang Make 函数</title>
                <link>https://5hui.win/posts/golang-make-function/</link>
                <guid isPermaLink="true">https://5hui.win/posts/golang-make-function/</guid>
                <pubDate>Wed, 03 Mar 2021 16:52:37 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;go1&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.15.6&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;darwin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;amd64&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;conditions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Output: 1 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;conditions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Output: 2 2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;conditionValues&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditionValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditionValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Output: 0 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;conditionValues&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditionValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditionValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conditionValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Output: 1 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/golang/">golang</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Git子模块创建及使用</title>
                <link>https://5hui.win/posts/git%E5%AD%90%E6%A8%A1%E5%9D%97%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
                <guid isPermaLink="true">https://5hui.win/posts/git%E5%AD%90%E6%A8%A1%E5%9D%97%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
                <pubDate>Thu, 25 Feb 2021 09:55:53 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;ul&gt;
&lt;li&gt;在一个 Git 项目中增加子模块
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git submodule add https://github.com/chaconinc/DbConnector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在父级项目中提交子模块相关文件&lt;/li&gt;
&lt;li&gt;克隆带有子模块的项目后，子模块需要初始化才能使用：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git submodule init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或者将上面两个命令合并成一个 &lt;code&gt;git submodule update --init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以在克隆父项目同时克隆子项目可以执行
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/chaconinc/MainProject&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;[&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97&#34;&gt;Git 工具 - 子模块&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Chrome自带网页长截图功能</title>
                <link>https://5hui.win/posts/chrome%E8%87%AA%E5%B8%A6%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD/</link>
                <guid isPermaLink="true">https://5hui.win/posts/chrome%E8%87%AA%E5%B8%A6%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD/</guid>
                <pubDate>Wed, 24 Feb 2021 19:18:27 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;ul&gt;
&lt;li&gt;打开 Chrome&lt;/li&gt;
&lt;li&gt;调起开发者工具 &lt;code&gt;Command+option+j&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;按下 &lt;code&gt;Command+shift+p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入 &lt;code&gt;full&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;按下回车键&lt;/li&gt;
&lt;li&gt;Done&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Golang实现冒泡排序</title>
                <link>https://5hui.win/posts/golang%E5%AE%9E%E7%8E%B0%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
                <guid isPermaLink="true">https://5hui.win/posts/golang%E5%AE%9E%E7%8E%B0%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
                <pubDate>Tue, 23 Feb 2021 10:15:58 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;p&gt;&lt;img src=&#34;https://zzjlogin.github.io/_images/bubble-sort.gif&#34; alt=&#34;冒泡排序辅助记忆图&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timeCost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// 纳秒
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nb&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;time cost &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Since&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testBuble&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timeCost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bubble&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Perm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testBuble&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bubble&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;				&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/golang/">golang</category>
                                
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/bubble/">bubble</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>【播客第3期】中国面临的挑战与机遇</title>
                <link>https://5hui.win/posts/podcasts-0003/</link>
                <guid isPermaLink="true">https://5hui.win/posts/podcasts-0003/</guid>
                <pubDate>Wed, 30 Sep 2020 14:37:23 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;p&gt;.主讲人：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%91%A8%E5%AD%9D%E6%AD%A3&#34;&gt;周孝正&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;audio src=&#34;http://njy.ymlair.com/podcasts/podcasts-0003&#34; controls style=&#34;width: 100%;&#34;&gt;
&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/podcasts/">podcasts</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>HTTP 状态码500 502 503 504 详解</title>
                <link>https://5hui.win/posts/server-return-code-503-or-504/</link>
                <guid isPermaLink="true">https://5hui.win/posts/server-return-code-503-or-504/</guid>
                <pubDate>Tue, 22 Sep 2020 16:07:03 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h3 id=&#34;故事简介&#34;&gt;故事简介&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;男主与女主吵架，女主特别生气，回了娘家。
男主思来想去，大丈夫不拘小节，应把女主接回来。
男主上门，女主生气在主卧，不让见 403
次日上门，女主生气逛街，不知去向，没找到 404
次日再来，被告知娘家买新房，女主在另一套 302
转至另一套，男主入室见到女主，但聊的不嗨，中途吵架，Game Over! 500
次日，娘家买新房后，这套卖了，所以女主全家只能在另一套 301
转至另一套，岳母不忍姑娘受气，将男主拦在门外，“此路是我开，此树是我栽，所以此路不通” 502
次日，女主见有人帮忙出气，便怨气消散，命男主今日子时来见，不巧男主来晚，岳母便觉心中无我儿者滚之，不等，今日不回 504
次日，但女主睡觉踢被子着凉，重感冒，病倒在床 503
女主和男主牵手返回家中 200，这个日期且叫它 末日
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;500系理解&#34;&gt;500系理解&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;`500` 应用内部错误，如数据库、代码逻辑问题；
`502` 网关错误，从客户端到应用服务内，可能经过多个转发组件（代理），其中的组件发生错误，如 DNS 挂了或者组件接收到了不能识别的返回值；而 
`504` 一般是中间的这些组件等待时间超过了自己的设置，原因是应用没能及时返回；
`503` 一般是应用挂掉或者应用达到最大处理能力，拒绝新的连接请求。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://golangbyexample.com/server-error-5xx/&#34;&gt;Server Error – 500 vs 502 vs 503 vs 504&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/http/">http</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>【已解决】k8s服务报504网关超时</title>
                <link>https://5hui.win/posts/istio-request-timeout/</link>
                <guid isPermaLink="true">https://5hui.win/posts/istio-request-timeout/</guid>
                <pubDate>Tue, 22 Sep 2020 15:36:40 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h3 id=&#34;场景&#34;&gt;场景&lt;/h3&gt;
&lt;p&gt;.线上服务偶尔报 &lt;code&gt;504 Gateway timeout&lt;/code&gt;，一般在量大的时候出现。&lt;/p&gt;
&lt;h3 id=&#34;原因&#34;&gt;原因&lt;/h3&gt;
&lt;p&gt;线上服务运行在 k8s 集群中，集群使用了 Istio ，Istio 的 Envoy 代理等待目标服务返回的超时时间默认值为 15 秒，这里使用的 Istio 版本为 Istio-v1.1.5，其他版本自行测试。&lt;/p&gt;
&lt;h3 id=&#34;解决方法&#34;&gt;解决方法&lt;/h3&gt;
&lt;p&gt;在 Istio 的虚拟服务中添加超时设置，调整为 30 秒，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v2
    timeout: 30s
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/zh/docs/concepts/traffic-management/#timeouts&#34;&gt;Istio 默认超时&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/istio/">istio</category>
                                
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/error/">error</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>【播客第2期】我的奋斗</title>
                <link>https://5hui.win/posts/podcasts-0002/</link>
                <guid isPermaLink="true">https://5hui.win/posts/podcasts-0002/</guid>
                <pubDate>Fri, 18 Sep 2020 15:34:52 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;p&gt;.主讲人：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%91%A8%E5%AD%9D%E6%AD%A3&#34;&gt;罗永浩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;audio src=&#34;http://njy.ymlair.com/podcasts/podcasts-0002&#34; controls style=&#34;width: 100%;&#34;&gt;
&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/podcasts/">podcasts</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>【播客第1期】中国社会问题分析</title>
                <link>https://5hui.win/posts/podcasts-0001/</link>
                <guid isPermaLink="true">https://5hui.win/posts/podcasts-0001/</guid>
                <pubDate>Fri, 18 Sep 2020 14:11:59 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;p&gt;.主讲人：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%91%A8%E5%AD%9D%E6%AD%A3&#34;&gt;周孝正&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;audio src=&#34;http://njy.ymlair.com/podcasts/podcasts-0001&#34; controls style=&#34;width: 100%;&#34;&gt;
&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/podcasts/">podcasts</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>【已解决】Mac OS Upgrade Xcrun Error</title>
                <link>https://5hui.win/posts/mac-upgrade-xcrun-error/</link>
                <guid isPermaLink="true">https://5hui.win/posts/mac-upgrade-xcrun-error/</guid>
                <pubDate>Mon, 27 Jul 2020 17:20:50 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Mac系统版本升级到10.15.6后，Goland IDE 编译 go 项目时报错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools),
missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时如果还是报错，请执行这个：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo xcode-select --reset
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ma.ttias.be/mac-os-xcrun-error-invalid-active-developer-path-missing-xcrun/&#34;&gt;Mac OS Error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/mac/">mac</category>
                                
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/error/">error</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>【已解决】Nginx Rewrite 重写带#号的路由</title>
                <link>https://5hui.win/posts/nginx-rewrite-%E4%B8%8D%E8%83%BD%E9%87%8D%E5%86%99%E5%B8%A6%E4%BA%95%E5%8F%B7%E7%9A%84%E8%B7%AF%E7%94%B1/</link>
                <guid isPermaLink="true">https://5hui.win/posts/nginx-rewrite-%E4%B8%8D%E8%83%BD%E9%87%8D%E5%86%99%E5%B8%A6%E4%BA%95%E5%8F%B7%E7%9A%84%E8%B7%AF%E7%94%B1/</guid>
                <pubDate>Sat, 11 Jul 2020 16:07:06 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;
&lt;p&gt;前端修改页面路由，但同时应该兼容旧的路由，保证旧的路由转到新路由上去&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$host/index.html#/args?sign=xxx  ==&amp;gt; $host/index.html#/new/args?sign=xxx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;过程&#34;&gt;过程&lt;/h2&gt;
&lt;p&gt;首先想到的就是使用 nginx 重写路由，可惜想法是好的，但 nginx 做不到。巧妇难为无米之炊，浏览器不会把 # 号后的内容发送给 nginx ，所以凉凉了。&lt;/p&gt;
&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;
&lt;p&gt;如果遇到这种需求，应该考虑在前端做中间页，通过中间页跳转的方式实现。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://serverfault.com/questions/714232/nginx-discards-data-after-number-sign/714245&#34;&gt;Nginx discards data after number sign (#)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/pengqiaowolf/article/details/80334119&#34;&gt;URL中“#” “？” &amp;amp;“”号的作用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/nginx/">nginx</category>
                                
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/write/">write</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Acme为nginx生成https证书</title>
                <link>https://5hui.win/posts/acme%E4%B8%BAnginx%E7%94%9F%E6%88%90https%E8%AF%81%E4%B9%A6/</link>
                <guid isPermaLink="true">https://5hui.win/posts/acme%E4%B8%BAnginx%E7%94%9F%E6%88%90https%E8%AF%81%E4%B9%A6/</guid>
                <pubDate>Fri, 03 Jul 2020 17:27:18 &#43;0800</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h2 id=&#34;安装acmesh&#34;&gt;安装acme.sh&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;curl https://get.acme.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;命令简介&#34;&gt;命令简介&lt;/h2&gt;
&lt;p&gt;申请证书需要对你的域名进行验证，使用本地 Nginx 验证：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/.acme.sh/acme.sh  --issue  -d 你的域名 --nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面这条命令会在 ~/.acme.sh 文件夹下生成域名相关的证书文件，而 nginx 读取的证书文件最好在 /etc/nginx 中，下面的命令会把文件复制一份到 /etc/nginx/ssl 下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/.acme.sh/acme.sh  --installcert  -d  你的域名 \
--key-file   /etc/nginx/ssl/你的域名/你的域名.key \
--fullchain-file /etc/nginx/ssl/你的域名/fullchain.cer \
--reloadcmd &amp;quot;service nginx force-reload&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有一步，就是在nginx上加证书配置，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 443;
    server_name 你的域名;
    ssl on;
    root /var/www/html;
    index index.html index.htm;
    ssl_certificate  /etc/nginx/ssl/你的域名/fullchain.cer;
    ssl_certificate_key /etc/nginx/ssl/你的域名/你的域名.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security &amp;quot;max-age=63072000; includeSubdomains; preload&amp;quot;;

    location / {
        index index.html index.htm;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启nginx，测试证书有效性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx -t &amp;amp;&amp;amp; nginx -s reload
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/acme/">acme</category>
                                
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/nginx/">nginx</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>用 sed 命令校验数据格式</title>
                <link>https://5hui.win/posts/%E7%94%A8-sed-%E5%91%BD%E4%BB%A4%E6%A0%A1%E9%AA%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</link>
                <guid isPermaLink="true">https://5hui.win/posts/%E7%94%A8-sed-%E5%91%BD%E4%BB%A4%E6%A0%A1%E9%AA%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</guid>
                <pubDate>Sat, 07 Apr 2018 16:38:17 &#43;0000</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h4 id=&#34;介绍&#34;&gt;介绍&lt;/h4&gt;
&lt;p&gt;sed 是一种流编辑器，是Unix常见的命令行程序。能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。	Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。&lt;/p&gt;
&lt;h4 id=&#34;校验数据格式&#34;&gt;校验数据格式&lt;/h4&gt;
&lt;p&gt;有时在本机做测试，需要从网上下载比较大的 CSV 文件，然而在导入数据库的过程中报错。做的友好一点的数据库会告诉你是格式错误，遇到不友好的就要折腾一番。为了避免这种情况，可以在下载文件后直接用 sed 命令检查下数据格式是否正确。
查看下载文件 &lt;code&gt;hotel.csv&lt;/code&gt; 的正确数据格式：
&lt;code&gt;head -n 1 hotel.csv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如图，正确的数据格式应该是每行32个以逗号分割的字段，用 sed 检查是否有错误格式的数据：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sed -E &#39;/([^,]*,){31}/d&#39; hotel.csv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数 -E：表示后面是标准正则；
字符  d：表示把正则匹配的行都删除，所以会显示不匹配的行；&lt;/p&gt;
&lt;p&gt;不要试图去找各种牛X的软件去做这件事，因为一般这种文件会达到几个 G，打开它需要很大内存，而sed每次处理一行。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/sed/">sed</category>
                                
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/csv/">csv</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Docker初步学习-$k</title>
                <link>https://5hui.win/posts/docker%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0-k/</link>
                <guid isPermaLink="true">https://5hui.win/posts/docker%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0-k/</guid>
                <pubDate>Wed, 31 Jan 2018 09:53:17 &#43;0000</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h2 id=&#34;docker简介&#34;&gt;Docker简介&lt;/h2&gt;
&lt;p&gt;Docker是用来做什么的，举个例子，有一批货物需要运走，此时需要一种服务&amp;ndash;运输服务，假设目前没有交通工具，但是拥有组装汽车的所有原材料（轮胎，发动机等等），想要实现运输就需要自己手动组装，并且要了解各个部件的工作原理，非常的麻烦。而Docker则会帮我们组装好一辆货车，不需要你进行麻烦且繁琐的操作，当你需要其他服务也是一样，直接通过Docker可以直接拿来使用。现在想想开发php时需要哪些服务，nginx、php-fpm、mysql、redis等，有了Docker你不需要一个一个安装、编译、配置，使用docker pull 命令可以轻松拿到这些，你要做的只是让他们之间彼此关联。&lt;/p&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;
&lt;p&gt;一个完整的Docker有以下几个部分组成：
1、Docker Daemon守护进程（Docker 服务，类似于mysql-server）
2、Docker Client客户端（使用 &#39; docker [command] &amp;lsquo;完成一些操作,类似于mysql-client）
3、Image镜像，镜像是可被Docker运行的文件，如同例子中交通工具的原材料+如何组装成货车的配置信息。
4、Container容器，镜像运行时的实体，在例子中Docker将原材料载入，之后加工成货车（容器），同样的原材料+同样的货车配置信息，就可以生产出多辆货车，容器也是一样。Docker可以从一个镜像运行出多个同样的容器，所以一个容器出现故障，重新启动一个就ok。容器可以被创建、启动、停止、删除、暂停。
当然你也可以给货车增加个导弹系统，只要你有原材料和组装导弹的配置信息，那么新产出的火车可以提供运输和作战两种服务，同理一个容器可以运行php+nginx+mysql等不同的服务，一切来源于你的镜像。
容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，虽然容器内是虚拟环境，使用起来，就好像是在一个独立于宿主的系统下操作一样。&lt;/p&gt;
&lt;h2 id=&#34;docker比传统虚拟机更快&#34;&gt;Docker比传统虚拟机更快&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-00a830355296979e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图一:  虚拟机 vs Docker&#34;&gt;&lt;/p&gt;
&lt;p&gt;Docker也是一种虚拟化技术。与传统虚拟机对比，虚拟机运行在虚拟硬件上，应用运行在虚拟机内核上。而 Docker daemon 是宿主机上的一个进程, 应用只是 Docker daemon 的一个子进程, 换句话说， 应用直接运行在宿主机内核上；虚拟机需要特殊硬件虚拟化技术支持，因而只能运行在物理机上。Docker 没有硬件虚拟化，因而可以运行在物理机、虚拟机，甚至 Docker 容器内(嵌套运行)；因为没有硬件虚拟化及多运行一个 Linux 内核的开销，应用运行在 Docker 上比虚拟机上更轻、更快。&lt;/p&gt;
&lt;h2 id=&#34;运行一个容器&#34;&gt;运行一个容器&lt;/h2&gt;
&lt;p&gt;了解相关概念之后开始练习使用。
1、首先在你的电脑上完成Docker的&lt;a href=&#34;https://docs.docker.com/engine/installation/&#34;&gt;安装&lt;/a&gt;，
2、寻找自己想要使用的镜像文件
去&lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;（是一个集中存储镜像的服务，称为&lt;strong&gt;Docker Registry&lt;/strong&gt;）上检索自己想要使用的服务，检索出的每条内容被称为一个仓库（Repository），每个仓库中有多个标签（tags，如php：5.5，其中php是仓库名，5.5是标签），一个标签对应一个镜像，拉取镜像到本地的命令是 ‘docker pull 镜像名:仓库名’， 如
&lt;code&gt;docker pull php:5.5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当标签是 latest 时，可省略：
&lt;code&gt;docker pull php 等同于 docker pull php:latest&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-8b49137fefa0037e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图二：docker hub 检索结果&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-7e82e54f90a6a23c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图三：含有多个标签的 php 仓库&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可以通过命令行搜索，如搜索php相关镜像：
&lt;code&gt;docker search php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-a5dce1f3a56d0f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图四： docker search 结果&#34;&gt;&lt;/p&gt;
&lt;p&gt;请尝试下载一个nginx 镜像到本地，要指定标签。
3、查看本地镜像列表
&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4、创建容器
&lt;code&gt;docker run -d --name nginx-test -v /var/www:/var/www -p 8080:80  nginx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-d,让容器在后台执行；
&amp;ndash;name，给容器分配名字
-v，挂载数据卷。容器像正常的Linux系统一样可以存储数据，但是当运行的容器出现故障不能正常启动时，我们就要通过同样的镜像运行一个新的容器实例，容器运行的服务是相同的，但是彼此隔离，不能共用数据，所以要通过数据卷的挂载实现数据的持久化。-v相当于把主机的/var/www目录同步到容器中的/var/www目录，如果容器不存在这个目录，则自动创建，挂载后两个文件夹实现了数据双向同步，每个容器的数据得以保存。新启用的nginx容器实例通过同样的挂载方式可以直接使用之前的数据。想要修改容器中nginx服务的配置，就要使用到数据卷，因为这是可变数据。数据卷是一个可供一个或多个容器使用的特殊目录，有如下特点，数据卷可以在容器之间共享和重用；对数据卷的修改会立马生效；对数据卷的更新，不会影响镜像；数据卷默认会一直存在，即使容器被删除
-p，端口映射，主机的8080端口映射到容器的80端口，此时访问主机8080会转到容器的80端口来获取数据
最后的nginx就是仓库名，会寻找nginx:latest的镜像启动，这里也可用本地镜像的id，镜像id通过 docker images 命令 可以得到&lt;/p&gt;
&lt;h2 id=&#34;容器的管理&#34;&gt;容器的管理&lt;/h2&gt;
&lt;p&gt;容器启动之后，查看本地正在运行的容器
&lt;code&gt;docker ps&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看本地所有容器，包括运行中和暂停运行的
&lt;code&gt;docker ps -a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-65669cc976657a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图五 : docker ps -a 结果&#34;&gt;&lt;/p&gt;
&lt;p&gt;将暂停的容器启动
&lt;code&gt;docker start 容器名称/容器id（容器id可用 docker ps 查看）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;暂停一个运行的容器
&lt;code&gt;docker stop 容器名称/容器id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除一个容器,删除正在运行的容器要增加 -f 参数
&lt;code&gt;docker rm 容器名称/容器id&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;进入容器&#34;&gt;进入容器&lt;/h2&gt;
&lt;p&gt;进入容器的方式有多种，这里只介绍和推荐使用Docker自带的docker exec方式，Docker1.3增加新的exec命令行工具，进入container更加方便：
&lt;code&gt;docker exec -i -t  容器名称/id  bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;bash是容器系统的shell，如容器是centos系统，shell可以是bash、sh，进入容器后，尝试运行 &#39; ls / &#39; 命令&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;尝试运行一个容器实例，这会让你对Docker的有进一步理解。&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://jm.taobao.org/2016/05/12/introduction-to-docker/&#34;&gt;http://jm.taobao.org/2016/05/12/introduction-to-docker/&lt;/a&gt;
&lt;a href=&#34;https://yeasy.gitbooks.io/docker_practice/content/basic_concept/container.html&#34;&gt;https://yeasy.gitbooks.io/docker_practice/content/basic_concept/container.html&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/docker/">docker</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Docker($k)搭建一套php开发环境</title>
                <link>https://5hui.win/posts/docker-k-%E6%90%AD%E5%BB%BA%E4%B8%80%E5%A5%97php%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
                <guid isPermaLink="true">https://5hui.win/posts/docker-k-%E6%90%AD%E5%BB%BA%E4%B8%80%E5%A5%97php%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
                <pubDate>Wed, 31 Jan 2018 09:52:01 &#43;0000</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h2 id=&#34;导语&#34;&gt;导语&lt;/h2&gt;
&lt;p&gt;下面内容将介绍如何把容器当作一个命令来使用以及搭建一套php+nginx的 web 服务，这里需要两个镜像，用两个镜像的主要目的是学习如何让 Docker 容器之间相互通信。阅读完下面的内容就可以搭建自己的 Docker 服务了。&lt;/p&gt;
&lt;h2 id=&#34;把-php-容器当作命令行使用&#34;&gt;把 php 容器当作命令行使用&lt;/h2&gt;
&lt;p&gt;镜像下载：
&lt;code&gt;docker pull php:7.0-fpm-alpine php&lt;/code&gt;
这里的镜像是基于 &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;alpine&lt;/a&gt; 系统的，因为基于alpine系统的镜像文件会比较小，下载速度更快。由于国内下载镜像文件较慢，推荐使用镜像加速器&lt;a href=&#34;http://www.daocloud.io/mirror#accelerator-doc&#34;&gt;DaoCloud&lt;/a&gt;。
&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-4834550be10bce02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图一：docker images | grep php&#34;&gt;&lt;/p&gt;
&lt;p&gt;下载镜像是为了搭建一个 web 服务，如果只想简单的使用 php 命令行，怎么办？我们知道从镜像启动的容器中肯定是可以使用命令行，如果每次使用 php 命令行都进入容器，显得特别麻烦，其实 Docker 可以这样用：
&lt;code&gt;docker run -it --rm  php:7.0-fpm-alpine php --version&lt;/code&gt;
&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-d76bb6d80410473b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图二：把php容器当作命令行使用&#34;&gt;
命令比较长，给它设置个别名就好多了。下面介绍下相关参数：
-i：以交互模式运行容器，通常与 -t 同时使用；
-t： 为容器重新分配一个伪输入终端，通常与 -i 同时使用；
&amp;ndash;rm：容器退出时自动删除，如果不加这个参数，当你执行完上面的命令，php容器会退出，变为一个暂停状态的容器，通过 &lt;code&gt;docker ps -a&lt;/code&gt; 可以查询到；
php &amp;ndash;version：在容器名后面的字符会被当作容器的shell命令来处理；
*注：关于参数 -i -t ，这里上面的命令可以不加，因为没有交互操作，在使用node容器的命令行时会有交互，需要加上，两个参数同时使用就好：
&lt;code&gt;docker run -i -t --rm node:alpine node&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-d96f8843e4eb70c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图三：node容器命令行的使用&#34;&gt;&lt;/p&gt;
&lt;p&gt;想用容器同时执行多个命令，不能直接在后面加 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;，需要使用 &lt;code&gt;sh -c &lt;/code&gt;来实现，：
&lt;code&gt;docker run  --rm  php:7.0-fpm-alpine sh -c &#39; echo &amp;quot;123&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;456&amp;quot; &#39; &lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;启动php服务&#34;&gt;启动php服务&lt;/h2&gt;
&lt;p&gt;执行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run \
	-d \
	--name php \
	-v /root/docker/etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini:ro \
	-v /root/docker/html:/var/www/html \
	php:7.0-fpm-alpine
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;-d：后台运行容器，并且返回容器 ID；
&amp;ndash;name：给容器命名，容器名是唯一的，操作容器时可以使用名称代替容器 ID；
:ro：表示挂载的文件或者文件夹为只读模式；
从命令可以知道容器是后台运行，名字是 php，它挂载了主机的一个文件 php.ini 和一个目录 /root/docker/html，并且 php.ini 是只读的，所以在容器内不可以对这个文件做修改。/usr/local/etc/php/conf.d 这个目录是容器中的 php 读取用户自定义配置文件的目录，正常情况下都可以在 Docker Hub 上有说明，如果没有可以自己运行 &lt;code&gt;phpinfo();&lt;/code&gt; 来查看。之前介绍过，只要挂载，那么本地主机目录就会和容器内的目录同步。需要修改容器的 php 配置时，只要在主机本地编辑保存这个 php.ini 文件，然后执行：
&lt;code&gt;docker restart php （php是容器名字）&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;php-容器和-nginx-容器通信&#34;&gt;php 容器和 nginx 容器通信&lt;/h2&gt;
&lt;p&gt;首先下载nginx镜像：
&lt;code&gt;docker pull nginx:stable-alpine&lt;/code&gt;
启动 nginx 服务：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run \
	-d \
	--link php \
	--name nginx \
	-v /root/docker/etc/nginx/conf.d/:/etc/nginx/conf.d/ \
	-v /root/docker/html:/var/www/html \
        -v /var/log/nginx:/var/log/nginx \
	-p 8088:80 \
	nginx:stable-alpine
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;link：确保 nginx 可以与 php 之间通信，在 nginx 容器中直接  &lt;code&gt;ping php&lt;/code&gt; 是可以通的，实际上加上这个参数后，会在 nginx 容器增加 host 解析，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-04260da4a4a546ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图四：nginx与php之间通信&#34;&gt;
增加 nginx 虚拟主机配置，放到主机目录  /root/docker/etc/nginx/conf.d 下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
	listen 80;
	root /var/www/html;
	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	location ~ \.php$ {
		fastcgi_pass php:9000;
                fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include        fastcgi_params;
	}
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log  debug;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fastcgi_pass 后面使用的 php 就是 &amp;ndash;link 参数增加的host解析，直接用别名代替ip地址，更加方便。然后重启 nginx 服务：
&lt;code&gt;docker restart nginx&lt;/code&gt;
在 主机本地的 /root/docker/html 目录新建 index.php：
&lt;code&gt;echo &amp;quot;&amp;lt;?php\nphpinfo();&amp;quot; | tee /root/docker/html/index.php&lt;/code&gt;
现在一个 web 服务搭建好了，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-9e68506a92c18fbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图五：web服务&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;查看-nginx-日志&#34;&gt;查看 nginx 日志&lt;/h2&gt;
&lt;p&gt;容器内 nginx 的日志会写入容器内的 /var/log/nginx 目录下，由于这个目录和主机的 /var/log/nginx 目录是同步的，所以，想看容器内 nginx 的日志，查看主机的文件 /var/log/nginx/access.log 就可以：
&lt;code&gt;tail -f /var/log/nginx/access.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-c2d664e8bcf92ab7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图六：本地查看nginx容器访问日志&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;基本的启动配置服务的命令上面都有介绍，自己可以尝试给这个 web 服务增加个 mysql
存储功能。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/docker/">docker</category>
                                
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/php/">php</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Chromeless Demo</title>
                <link>https://5hui.win/posts/chromeless-demo/</link>
                <guid isPermaLink="true">https://5hui.win/posts/chromeless-demo/</guid>
                <pubDate>Wed, 31 Jan 2018 09:50:33 &#43;0000</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h2 id=&#34;chromeless-简介&#34;&gt;Chromeless 简介&lt;/h2&gt;
&lt;p&gt;Chrome 浏览器有一种模式叫做 Chrome Headless，在这种模式下，允许你正常运行 Chrome 浏览器，但是没有界面；想要调试这种模式下打开的网站，可以通过它提供的接口来实现，而 &lt;a href=&#34;https://github.com/graphcool/chromeless&#34;&gt;Chromeless&lt;/a&gt; 就是把这层接口做了封装，让你使用接口更方便。通过它，可以控制浏览器行为，如打开网站、点击按钮、填充表单、获取 DOM 元素&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;可以用来做什么&#34;&gt;可以用来做什么&lt;/h2&gt;
&lt;p&gt;1 .  可以&lt;a href=&#34;https://github.com/graphcool/chromeless/blob/master/examples/google-screenshot.js&#34;&gt;获取网页截图&lt;/a&gt;
2 .  根据页面 document 文档&lt;a href=&#34;https://github.com/graphcool/chromeless/blob/master/examples/google-pdf.js&#34;&gt;生成 PDF 文件&lt;/a&gt;
3 .  编写测试代码，自动化测试网页
4 .  基于真实的浏览器环境，可以编写爬虫程序&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;首先要安装支持 Chrome Headless 模式的浏览器。目前，Mac 上 Chrome 59 beta
版本与 Linux 上的 Chrome 57+ 已经开始支持 headless 特性。Windows 上 Chrome 暂时不支持，可以使用 &lt;a href=&#34;https://www.google.com/chrome/browser/canary.html&#34;&gt;Chrome Canary 60&lt;/a&gt; 进行开发。
下面是 Ubuntu17.10 的无界面浏览器启动命令示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;google-chrome \
--remote-debugging-port=9222 \
--disable-gpu \
--no-sandbox  \
--headless
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Chromeless 用 NodeJS 编写，要求 NodeJS 版本8.2+，安装：
&lt;code&gt;npm install chromeless&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何用于网页测试&#34;&gt;如何用于网页测试&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;const { Chromeless } = require(&#39;chromeless&#39;)
const { expect }  = require(&#39;chai&#39;)

async function run(){
	const chromeless = new Chromeless()
	const firstPage= await chromeless
		.goto(&#39;http://www.w3school.com.cn&#39;)
		.wait(&#39;#navsecond&#39;)
		.evaluate(() =&amp;gt; {
  			  // this will be executed in Chrome
  			  const links = [].map.call(
  			    document.querySelectorAll(&#39;#navsecond ul:nth-child(2) li&#39;),
  			    a =&amp;gt; (a.innerText.trim())
  			  )
  			  return links
  			})
expect(firstPage).to.have.members([&amp;quot;JS&amp;quot;,&amp;quot;HTML5&amp;quot;,&amp;quot;XHTML&amp;quot;,&amp;quot;CSS&amp;quot;,&amp;quot;CSS3&amp;quot;,&amp;quot;TCP/IP&amp;quot;])
await chromeless.end()
}
# 运行并捕捉错误
run().catch(console.error.bind(console))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里用到了 &lt;a href=&#34;http://chaijs.com/api/bdd/&#34;&gt;Chai&lt;/a&gt; 断言库，代码实现的功能是验证 &lt;a href=&#34;http://www.w3school.com.cn&#34;&gt;W3school&lt;/a&gt; 网站首页，左侧第一个 ul 列表的内容是否包含以下内容： JS、HTML5、XHTML、CSS、CSS3、TCP/IP&amp;quot;。
命令详解：
goto：打开加载网站 &lt;code&gt;http://www.w3school.com.cn&lt;/code&gt;；
wait：等待指定的元素 &lt;code&gt;#navsecond&lt;/code&gt;（这是 &lt;a href=&#34;http://www.w3school.com.cn/cssref/css_selectors.asp&#34;&gt;CSS selector&lt;/a&gt;） 渲染成功之后才往下执行；
evaluate：会将里面的 JS 代码送到 浏览器中执行，并获取返回结果；
运行结果：
&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-2d9f002f40084a27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;图一：网页测试Demo结果&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何爬取-google-search-result&#34;&gt;如何爬取 Google Search Result&lt;/h2&gt;
&lt;p&gt;下面代码实现的功能是使用 Google Search 搜索关键字，并返回结果的 Title 和链接地址。
&lt;a href=&#34;https://asciinema.org/a/KlCxZMtSAlpQj9AHhSs8kSIVq&#34;&gt;查看执行结果&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const { Chromeless } = require(&#39;chromeless&#39;);

async function run(){
	const chromeless = new Chromeless()
	const firstPage= await chromeless
		.goto(&#39;https://www.google.com&#39;)
		.wait(&#39;input[name=&amp;quot;q&amp;quot;]&#39;)
		.type(&#39;云纵&#39;, &#39;input[name=&amp;quot;q&amp;quot;]&#39;)
		.press(13) // press enter
		.wait(&#39;#foot&#39;)
		
	let hasNextPage = true
	let page = 1
	let result = null
	while (hasNextPage){
		if(page===1){
			result = await chromeless
				.evaluate(() =&amp;gt; {
  				  // this will be executed in Chrome
  				  const links = [].map.call(
  				    document.querySelectorAll(&#39;.g h3 a&#39;),
  				    a =&amp;gt; ({title: a.innerText, href: a.href})
  				  )
  				  return links
  				})
		}else{
			result = await chromeless
				.scrollTo(200,400)
				.scrollToElement(&#39;#foot td:nth-last-child(1)&#39;)
				.click(&#39;#foot td:nth-last-child(1)&#39;)
				.wait(2000)
				.wait(&#39;#foot&#39;)
				.evaluate(() =&amp;gt; {
	                          // this will be executed in Chrome
	                          const links = [].map.call(
	                            document.querySelectorAll(&#39;.g h3 a&#39;),
	                            a =&amp;gt; ({title: a.innerText, href: a.href})
	                          )
	                          return links
	                        })
		}
		console.log(result)
		hasNextPage = await chromeless.evaluate(() =&amp;gt; {
  			  let nextPage =  document.querySelector(&#39;#foot td:nth-last-child(1)&#39;).innerText
  			  //return (nextPage===&#39;Next&#39;)
  			  return nextPage.length
  			})
		console.log(`第${page}页`)
		console.log(hasNextPage ? &#39;存在下一页&#39; : &#39;不存在下一页&#39;)
		page++
	}
	await chromeless.end()
}

run().catch(console.error.bind(console))

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;命令解释：
&lt;code&gt;.type(&#39;云纵&#39;, &#39;input[name=&amp;quot;q&amp;quot;]&#39;)&lt;/code&gt;： 在 CSS 选择器 &lt;code&gt;input[name=&amp;quot;q&amp;quot;]&lt;/code&gt; 选中的元素（实际上就是 Google Search 搜索框）内输入’云纵‘两个字；
&lt;code&gt;.press(13)&lt;/code&gt; ：按下键盘的 Enter 键，就是在搜索框输入文字后执行查询；
&lt;code&gt;.scrollTo(200,400)&lt;/code&gt; ：滚动到距离页面左侧200px，右侧400px的位置；
&lt;code&gt;.scrollToElement(&#39;#foot td:nth-last-child(1)&#39;)&lt;/code&gt;：滚动到 CSS 选择器 &lt;code&gt;#foot td:nth-last-child(1)&lt;/code&gt; 选中元素（实际是 Google Search Result 的下一页链接），使元素可见；
&lt;code&gt;.click(&#39;#foot td:nth-last-child(1)&#39;)&lt;/code&gt;：点击元素；
&lt;code&gt;.wait(2000)&lt;/code&gt;：参数是数字时，表示等待时间，参数是 CSS 选择器时表示等待元素渲染完成；&lt;/p&gt;
&lt;h2 id=&#34;async-与-await&#34;&gt;Async 与 Await&lt;/h2&gt;
&lt;p&gt;开发时要注意这两个关键字 async 和 await，使用 Chromeless，会用到他们，这是 ES7 实现的异步方案，需要了解以下内容：
1 .  function 前面的 async 标识符表示函数内有异步操作；
2 .  await 强调后面的异步操作执行完成后才能继续；
3 .  await 只能用在async标识的函数内；
4 .  await 后写非异步操作也可以，会直接执行&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;1 .  &lt;a href=&#34;https://cnodejs.org/topic/5640b80d3a6aa72c5e0030b6&#34;&gt;体验异步的终极解决方案-ES7的Async/Await&lt;/a&gt;
2 .  &lt;a href=&#34;https://zhuanlan.zhihu.com/p/27100187&#34;&gt;初探 Headless Chrome&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/chromeless/">chromeless</category>
                                
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/headless/">headless</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Supervisor 让崩溃的程序自动重启</title>
                <link>https://5hui.win/posts/supervisor-%E8%AE%A9%E5%B4%A9%E6%BA%83%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/</link>
                <guid isPermaLink="true">https://5hui.win/posts/supervisor-%E8%AE%A9%E5%B4%A9%E6%BA%83%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/</guid>
                <pubDate>Wed, 31 Jan 2018 09:22:05 &#43;0000</pubDate>
                
                    <author>hpmarkup@gmail.com (ymlair)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h3 id=&#34;supervisor-介绍&#34;&gt;Supervisor 介绍&lt;/h3&gt;
&lt;p&gt;Supervisor 是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器由于某种原因暂时 kill 掉你的应用，此时可以用 Supervisor 让你的应用自动重启，如果是多个应用被杀死，也省去了手动一个一个地敲命令重新启动。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;目前 Supervisor 只能运行在 Unix-Like 的系统上，无法运行在 Windows 上。Supervisor 官方版目前只能运行在 Python 2.4 以上版本，但是还无法运行在 Python 3 上。执行下面代码前，需要&lt;a href=&#34;https://pip.pypa.io/en/stable/installing/&#34;&gt;安装 pip&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install supervisor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成后，可以使用两个命令，分别是 &lt;code&gt;supervisord&lt;/code&gt; 和 &lt;code&gt;supervisorctl&lt;/code&gt;,如果你的系统里有两个版本的 Python，且默认的 &lt;code&gt;python&lt;/code&gt; 命令版本是 Python 3,此时运行会出错，解决方式是修改两个命令使用的 Python 版本。使用 &lt;code&gt;which&lt;/code&gt; 命令找到两个命令的文件地址，然后编辑文件并指定 Python 版本：
&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-42fbaf472b45e0dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;修改 Python 版本&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;编辑配置文件&#34;&gt;编辑配置文件&lt;/h3&gt;
&lt;p&gt;将下面内容保存到 &lt;code&gt;/etc/supervisor/supervisord.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;; 基础配置样例

[unix_http_server]
file=/var/run/supervisor.sock   ; (the path to the socket file)
chmod=0700                       ; sockef file mode (default 0700)

[supervisord]
logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)
pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
childlogdir=/var/log/supervisor            ; (&#39;AUTO&#39; child log dir, default $TEMP)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket

; The [include] section can just contain the &amp;quot;files&amp;quot; setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

[include]
files = /etc/supervisor/conf.d/*.conf ;加载其他配置文件

[inet_http_server]         ; inet (TCP) server disabled by default
port=*:9001                ; 通过网页可以控制子进程
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))

; 进程的配置样例

; 设置进程的名称，使用 supervisorctl 来管理进程时需要使用该进程名，这里的进程名是 your_program_name
[program:your_program_name] 
;numprocs=1                 ; 进程数量，默认为1
;process_name=%(program_name)s   ; 默认为 %(program_name)s，即 [program:x] 中的 x
directory=/home/yiming ; 执行 command 之前，先切换到工作目录
command=python test.py
autostart=true ;如果设置为true，当supervisord启动的时候，进程会自动重启。
user=yiming                 ; 使用 yiming 用户来启动该进程
autorestart=true   ; 程序崩溃时自动重启，重启次数是有限制的，默认为3次
startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了           
redirect_stderr=true        ; 错误日志重定向到标准输出
loglevel=info


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在以守护进程的方式启动 &lt;code&gt;test.py&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;supervisord -c /etc/supervisor/supervisord.conf

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时命令 &lt;code&gt;python test.ty&lt;/code&gt; 已经被执行，因为进程配置样例中有 &lt;code&gt;autostart=true&lt;/code&gt;，所以 Supervisord 服务运行后启动进程 your_program_name ，并把 your_program_name 进程作为自己的子进程，所以当进程 your_program_name 挂掉后，Supervisord 会收到通知，然后可以再次将 your_program_name 作为子进程启动。&lt;/p&gt;
&lt;h3 id=&#34;模拟程序异常退出&#34;&gt;模拟程序异常退出&lt;/h3&gt;
&lt;p&gt;如下图，名称为 echo 的进程被杀掉两次，之后都会被重新启动，右侧是 Supervisord 日志记录了  echo 进程状态的变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-8e9dac42e1906d30.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;功能演示&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用-supervisorctl-管理进程&#34;&gt;使用 supervisorctl 管理进程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;停止某一个进程，program_name 为 [program:x] 里的 x：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;supervisorctl stop program_name
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;启动某个进程：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;supervisorctl start program_name
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;重启某个进程：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;supervisorctl restart program_name
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;停止全部进程，注：start、restart、stop 都不会载入最新的配置文件：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;supervisorctl stop all
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;supervisorctl reload
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;supervisorctl update
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;web-管理&#34;&gt;Web 管理&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/5306603-4a7b683d50405b4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Web 管理进程&#34;&gt;&lt;/p&gt;
&lt;p&gt;Supervisor 可以在界面上管理进程，Web Server 其实是通过 XML_RPC 来实现的，可以向Supervisor 请求数据，也可以控制 Supervisor 及子进程。配置在 &lt;code&gt;[inet_http_server]&lt;/code&gt; 块里面：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[inet_http_server]         ; inet (TCP) server disabled by default
port=*:9001                ; 通过网页可以控制子进程
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;配置参数介绍&#34;&gt;配置参数介绍&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;command&lt;/td&gt;
&lt;td&gt;启动程序使用的命令，可以是绝对路径或者相对路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;process_name&lt;/td&gt;
&lt;td&gt;一个python字符串表达式，用来表示supervisor进程启动的这个的名称，默认值是%(program_name)s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;numprocs&lt;/td&gt;
&lt;td&gt;Supervisor启动这个程序的多个实例，如果numprocs&amp;gt;1，则process_name的表达式必须包含%(process_num)s，默认是1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;numprocs_start&lt;/td&gt;
&lt;td&gt;一个int偏移值，当启动实例的时候用来计算numprocs的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;priority&lt;/td&gt;
&lt;td&gt;权重，可以控制程序启动和关闭时的顺序，权重越低：越早启动，越晚关闭。默认值是999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autostart&lt;/td&gt;
&lt;td&gt;如果设置为true，当supervisord启动的时候，进程会自动重启。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autorestart&lt;/td&gt;
&lt;td&gt;值可以是false、true、unexpected。false：进程不会自动重启，unexpected：当程序退出时的退出码不是exitcodes中定义的时，进程会重启，true：进程会无条件重启当退出的时候。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;startsecs&lt;/td&gt;
&lt;td&gt;程序启动后等待多长时间后才认为程序启动成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;startretries&lt;/td&gt;
&lt;td&gt;supervisord尝试启动一个程序时尝试的次数。默认是3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exitcodes&lt;/td&gt;
&lt;td&gt;一个预期的退出返回码，默认是0,2。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stopsignal&lt;/td&gt;
&lt;td&gt;当收到stop请求的时候，发送信号给程序，默认是TERM信号，也可以是 HUP, INT, QUIT, KILL, USR1, or USR2。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stopwaitsecs&lt;/td&gt;
&lt;td&gt;在操作系统给supervisord发送SIGCHILD信号时等待的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stopasgroup&lt;/td&gt;
&lt;td&gt;如果设置为true，则会使supervisor发送停止信号到整个进程组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;killasgroup&lt;/td&gt;
&lt;td&gt;如果设置为true，则在给程序发送SIGKILL信号的时候，会发送到整个进程组，它的子进程也会受到影响。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;如果supervisord以root运行，则会使用这个设置用户启动子程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redirect_stderr&lt;/td&gt;
&lt;td&gt;如果设置为true，进程则会把标准错误输出到supervisord后台的标准输出文件描述符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stdout_logfile&lt;/td&gt;
&lt;td&gt;把进程的标准输出写入文件中，如果stdout_logfile没有设置或者设置为AUTO，则supervisor会自动选择一个文件位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stdout_logfile_maxbytes&lt;/td&gt;
&lt;td&gt;标准输出log文件达到多少后自动进行轮转，单位是KB、MB、GB。如果设置为0则表示不限制日志文件大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stdout_logfile_backups&lt;/td&gt;
&lt;td&gt;标准输出日志轮转备份的数量，默认是10，如果设置为0，则不备份&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stdout_capture_maxbytes&lt;/td&gt;
&lt;td&gt;当进程处于stderr capture mode模式的时候，写入FIFO队列的最大bytes值，单位可以是KB、MB、GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stdout_events_enabled&lt;/td&gt;
&lt;td&gt;如果设置为true，当进程在写它的stderr到文件描述符的时候，PROCESS_LOG_STDERR事件会被触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stderr_logfile&lt;/td&gt;
&lt;td&gt;把进程的错误日志输出一个文件中，除非redirect_stderr参数被设置为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stderr_logfile_maxbytes&lt;/td&gt;
&lt;td&gt;错误log文件达到多少后自动进行轮转，单位是KB、MB、GB。如果设置为0则表示不限制日志文件大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stderr_logfile_backups&lt;/td&gt;
&lt;td&gt;错误日志轮转备份的数量，默认是10，如果设置为0，则不备份&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stderr_capture_maxbytes&lt;/td&gt;
&lt;td&gt;当进程处于stderr capture mode模式的时候，写入FIFO队列的最大bytes值，单位可以是KB、MB、GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stderr_events_enabled&lt;/td&gt;
&lt;td&gt;如果设置为true，当进程在写它的stderr到文件描述符的时候，PROCESS_LOG_STDERR事件会被触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;environment&lt;/td&gt;
&lt;td&gt;一个k/v对的list列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;directory&lt;/td&gt;
&lt;td&gt;supervisord在生成子进程的时候会切换到该目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;umask&lt;/td&gt;
&lt;td&gt;设置进程的umask&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serverurl&lt;/td&gt;
&lt;td&gt;是否允许子进程和内部的HTTP服务通讯，如果设置为AUTO，supervisor会自动的构造一个url&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://5hui.win/tags/supervisor/">supervisor</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
